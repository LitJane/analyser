#!/usr/bin/python
# -*- coding: utf-8 -*-
# coding=utf-8


import os
import pickle
import re
import unittest

from contract_agents import ORG_LEVELS_re
from contract_parser import ContractDocument
from contract_patterns import ContractPatternFactory
from legal_docs import LegalDocument
from protocol_parser import find_protocol_org, find_org_structural_level


class TestProtocolParser(unittest.TestCase):

  def get_doc(self, fn) -> (ContractDocument, ContractPatternFactory):
    pth = os.path.dirname(__file__)
    with open(os.path.join(pth, fn), 'rb') as handle:
      doc = pickle.load(handle)

    self.assertEqual(1024, doc.embeddings.shape[-1])

    return doc

  def test_load_picke(self):
    doc = self.get_doc('–ü—Ä–æ—Ç–æ–∫–æ–ª_–°–î_ 3.docx.pickle')
    doc: LegalDocument = doc
    for p in doc.paragraphs:
      print('üò± \t', doc.get_tag_text(p.header).strip(), 'üìÇ')

  def test_find_protocol_org_1(self):
    txt = '''–ü—Ä–æ—Ç–æ–∫–æ–ª ‚Ññ 3/2019 –ü—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤ –∑–∞–æ—á–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –û–±—â–µ—Å—Ç–≤–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–ë–∞–∂–µ–Ω¬ª (–¥–∞–ª–µ–µ ‚Äì –û–û–û ¬´–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–ë–∞–∂–µ–Ω¬ª) –≥. –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ –î–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ¬´__¬ª _______ 2019 –≥–æ–¥–∞
    –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–∏–µ–º–∞ –±—é–ª–ª–µ—Ç–µ–Ω–µ–π –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è —á–ª–µ–Ω–æ–≤ –°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ ¬´___¬ª__________ 2019 –≥–æ–¥–∞.
    '''
    doc = ContractDocument(txt)
    doc.parse()

    tags = find_protocol_org(doc)
    self.assertEqual('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–ë–∞–∂–µ–Ω¬ª', tags[0].value)
    self.assertEqual('–û–±—â–µ—Å—Ç–≤–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é', tags[1].value)

  def test_find_protocol_org_2(self):
    doc = self.get_doc('–ü—Ä–æ—Ç–æ–∫–æ–ª_–°–î_ 3.docx.pickle')
    print(doc[0:200].text)
    tags = find_protocol_org(doc)
    self.assertEqual('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä ¬´–ë–∞–∂–µ–Ω¬ª', tags[0].value)
    self.assertEqual('–û–±—â–µ—Å—Ç–≤–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é', tags[1].value)

  def test_ORG_LEVELS_re(self):
    t = '''
    –ü–†–û–¢–û–ö–û–õ
–∑–∞—Å–µ–¥–∞–Ω–∏—è –°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏¬ª (–¥–∞–ª–µ–µ ‚Äì –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å- –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏¬ª –∏–ª–∏ ¬´–û–±—â–µ—Å—Ç–≤–æ¬ª)
–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è:
'''
    r = re.compile(ORG_LEVELS_re, re.MULTILINE | re.IGNORECASE | re.UNICODE)
    x = r.search(t)
    self.assertEqual('–°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤', x['org_structural_level'])

  def test_find_org_structural_level(self):
    t = '''
    –ü–†–û–¢–û–ö–û–õ \
    –∑–∞—Å–µ–¥–∞–Ω–∏—è –°–æ–≤–µ—Ç–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å - –í–Ω–µ–∑–µ–º–Ω–∞—è –õ—é–±–æ—Ñ—å–∏¬ª (–¥–∞–ª–µ–µ ‚Äì –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å-–í–ù–õ¬ª –∏–ª–∏ ¬´–û–±—â–µ—Å—Ç–≤–æ¬ª)\
    –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è:
    '''
    doc = LegalDocument(t)
    doc.parse()

    tags = list(find_org_structural_level(doc))
    self.assertEqual('–°–æ–≤–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤', tags[0].value)

  def test_find_org_structural_level_2(self):
    t = '''
    –ü–†–û–¢–û–ö–û–õ –Ω–æ—á–Ω–æ–≥–æ –∑–∞—Å–µ–¥–∞–Ω–∏—è –ü—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—â–µ—Å—Ç–≤–∞ –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å - –í–Ω–µ–∑–µ–º–Ω–∞—è –õ—é–±–æ—Ñ—å¬ª (–¥–∞–ª–µ–µ ‚Äì –û–û–û ¬´–ì–∞–∑–ø—Ä–æ–º–Ω–µ—Ñ—Ç—å- –í–ù–õ¬ª –∏–ª–∏ ¬´–û–±—â–µ—Å—Ç–≤–æ¬ª)\
    –ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞—Å–µ–¥–∞–Ω–∏—è:
    '''
    doc = LegalDocument(t)
    doc.parse()

    tags = list(find_org_structural_level(doc))
    self.assertEqual('–ü—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–µ—Å—Ç–≤–∞', tags[0].value)


unittest.main(argv=['-e utf-8'], verbosity=3, exit=False)
